// <auto-generated />
using System;
using Crowdy.DAL.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Crowdy.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20241009125058_addCommentToProject")]
    partial class addCommentToProject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Crowdy.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("category", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Alimentation"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Art"
                        },
                        new
                        {
                            Id = 3,
                            Name = "BD & Comics"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Beauté"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bijoux"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Cinéma & Vidéo"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Design"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Écologie"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Éducation"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Famille"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Mode"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Musique"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Photographie"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Santé"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Sport"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Technologie"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Voyage"
                        });
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Objective")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("ValidatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StatusId");

                    b.HasIndex("ValidatedById");

                    b.ToTable("project", null, t =>
                        {
                            t.HasCheckConstraint("CK_Project_EndDate", "EndDate > GETDATE()");

                            t.HasCheckConstraint("CK_Project_Objective", "Objective > 0");

                            t.HasCheckConstraint("CK_Project_StartDate", "StartDate >= GETDATE()");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1031),
                            Description = "Projet de maison intelligente",
                            EndDate = new DateTime(2025, 1, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1028),
                            ImageUrl = "project1.jpg",
                            Objective = 10000m,
                            OwnerId = 1,
                            StartDate = new DateTime(2024, 11, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(974),
                            StatusId = 1,
                            Title = "Smart Home",
                            UpdatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1032)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1038),
                            Description = "Collection de peintures abstraites",
                            EndDate = new DateTime(2025, 2, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1036),
                            ImageUrl = "project2.jpg",
                            Objective = 5000m,
                            OwnerId = 2,
                            StartDate = new DateTime(2024, 12, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1035),
                            StatusId = 1,
                            Title = "Peinture Abstraite",
                            UpdatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1040)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1045),
                            Description = "Enregistrement d'un album de rock",
                            EndDate = new DateTime(2024, 12, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1043),
                            ImageUrl = "project3.jpg",
                            Objective = 8000m,
                            OwnerId = 3,
                            StartDate = new DateTime(2024, 11, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1042),
                            StatusId = 1,
                            Title = "Album Rock",
                            UpdatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1046)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1051),
                            Description = "Développement d'une application mobile",
                            EndDate = new DateTime(2025, 4, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1050),
                            ImageUrl = "project4.jpg",
                            Objective = 15000m,
                            OwnerId = 4,
                            StartDate = new DateTime(2025, 1, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1048),
                            StatusId = 1,
                            Title = "Application Mobile",
                            UpdatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1053)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1058),
                            Description = "Organisation d'un concert live",
                            EndDate = new DateTime(2024, 12, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1057),
                            ImageUrl = "project5.jpg",
                            Objective = 12000m,
                            OwnerId = 5,
                            StartDate = new DateTime(2024, 11, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1055),
                            StatusId = 1,
                            Title = "Concert Live",
                            UpdatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1060)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1065),
                            Description = "Réalisation d'un film documentaire",
                            EndDate = new DateTime(2025, 3, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1063),
                            ImageUrl = "project6.jpg",
                            Objective = 20000m,
                            OwnerId = 6,
                            StartDate = new DateTime(2024, 12, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1061),
                            StatusId = 1,
                            Title = "Film Documentaire",
                            UpdatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1066)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1072),
                            Description = "Développement d'un jeu vidéo",
                            EndDate = new DateTime(2025, 2, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1070),
                            ImageUrl = "project7.jpg",
                            Objective = 30000m,
                            OwnerId = 7,
                            StartDate = new DateTime(2024, 11, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1069),
                            StatusId = 1,
                            Title = "Jeu Vidéo",
                            UpdatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1074)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1079),
                            Description = "Publication d'un livre de cuisine",
                            EndDate = new DateTime(2025, 1, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1078),
                            ImageUrl = "project8.jpg",
                            Objective = 7000m,
                            OwnerId = 8,
                            StartDate = new DateTime(2024, 11, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1076),
                            StatusId = 1,
                            Title = "Livre de Cuisine",
                            UpdatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1081)
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1086),
                            Description = "Organisation d'un festival de musique",
                            EndDate = new DateTime(2025, 4, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1084),
                            ImageUrl = "project9.jpg",
                            Objective = 25000m,
                            OwnerId = 9,
                            StartDate = new DateTime(2024, 12, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1083),
                            StatusId = 1,
                            Title = "Festival de Musique",
                            UpdatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1087)
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1093),
                            Description = "Lancement d'une startup technologique",
                            EndDate = new DateTime(2025, 3, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1091),
                            ImageUrl = "project10.jpg",
                            Objective = 50000m,
                            OwnerId = 10,
                            StartDate = new DateTime(2024, 11, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1090),
                            StatusId = 1,
                            Title = "Startup Technologique",
                            UpdatedAt = new DateTime(2024, 10, 9, 14, 50, 57, 72, DateTimeKind.Local).AddTicks(1094)
                        });
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.ProjectContribution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("project_contribution", null, t =>
                        {
                            t.HasCheckConstraint("CK_ProjectContribution_Amount", "Amount > 0");
                        });
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.ProjectThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("project_threshold", null, t =>
                        {
                            t.HasCheckConstraint("CK_ProjectThreshold_Amount", "Amount > 0");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100m,
                            Description = "Seuil 1 pour Smart Home",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200m,
                            Description = "Seuil 2 pour Smart Home",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 3,
                            Amount = 300m,
                            Description = "Seuil 3 pour Smart Home",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 4,
                            Amount = 400m,
                            Description = "Seuil 4 pour Smart Home",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 5,
                            Amount = 500m,
                            Description = "Seuil 5 pour Smart Home",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 6,
                            Amount = 100m,
                            Description = "Seuil 1 pour Peinture Abstraite",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 7,
                            Amount = 200m,
                            Description = "Seuil 2 pour Peinture Abstraite",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 8,
                            Amount = 300m,
                            Description = "Seuil 3 pour Peinture Abstraite",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 9,
                            Amount = 400m,
                            Description = "Seuil 4 pour Peinture Abstraite",
                            ProjectId = 2
                        },
                        new
                        {
                            Id = 10,
                            Amount = 100m,
                            Description = "Seuil 1 pour Album Rock",
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 11,
                            Amount = 200m,
                            Description = "Seuil 2 pour Album Rock",
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 12,
                            Amount = 300m,
                            Description = "Seuil 3 pour Album Rock",
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 13,
                            Amount = 400m,
                            Description = "Seuil 4 pour Album Rock",
                            ProjectId = 3
                        },
                        new
                        {
                            Id = 14,
                            Amount = 100m,
                            Description = "Seuil 1 pour Application Mobile",
                            ProjectId = 4
                        },
                        new
                        {
                            Id = 15,
                            Amount = 200m,
                            Description = "Seuil 2 pour Application Mobile",
                            ProjectId = 4
                        },
                        new
                        {
                            Id = 16,
                            Amount = 300m,
                            Description = "Seuil 3 pour Application Mobile",
                            ProjectId = 4
                        },
                        new
                        {
                            Id = 17,
                            Amount = 100m,
                            Description = "Seuil 1 pour Concert Live",
                            ProjectId = 5
                        },
                        new
                        {
                            Id = 18,
                            Amount = 200m,
                            Description = "Seuil 2 pour Concert Live",
                            ProjectId = 5
                        },
                        new
                        {
                            Id = 19,
                            Amount = 300m,
                            Description = "Seuil 3 pour Concert Live",
                            ProjectId = 5
                        },
                        new
                        {
                            Id = 20,
                            Amount = 400m,
                            Description = "Seuil 4 pour Concert Live",
                            ProjectId = 5
                        },
                        new
                        {
                            Id = 21,
                            Amount = 100m,
                            Description = "Seuil 1 pour Film Documentaire",
                            ProjectId = 6
                        },
                        new
                        {
                            Id = 22,
                            Amount = 200m,
                            Description = "Seuil 2 pour Film Documentaire",
                            ProjectId = 6
                        },
                        new
                        {
                            Id = 23,
                            Amount = 300m,
                            Description = "Seuil 3 pour Film Documentaire",
                            ProjectId = 6
                        },
                        new
                        {
                            Id = 24,
                            Amount = 100m,
                            Description = "Seuil 1 pour Jeu Vidéo",
                            ProjectId = 7
                        },
                        new
                        {
                            Id = 25,
                            Amount = 200m,
                            Description = "Seuil 2 pour Jeu Vidéo",
                            ProjectId = 7
                        },
                        new
                        {
                            Id = 26,
                            Amount = 300m,
                            Description = "Seuil 3 pour Jeu Vidéo",
                            ProjectId = 7
                        },
                        new
                        {
                            Id = 27,
                            Amount = 400m,
                            Description = "Seuil 4 pour Jeu Vidéo",
                            ProjectId = 7
                        },
                        new
                        {
                            Id = 28,
                            Amount = 500m,
                            Description = "Seuil 5 pour Jeu Vidéo",
                            ProjectId = 7
                        },
                        new
                        {
                            Id = 29,
                            Amount = 100m,
                            Description = "Seuil 1 pour Livre de Cuisine",
                            ProjectId = 8
                        },
                        new
                        {
                            Id = 30,
                            Amount = 200m,
                            Description = "Seuil 2 pour Livre de Cuisine",
                            ProjectId = 8
                        },
                        new
                        {
                            Id = 31,
                            Amount = 300m,
                            Description = "Seuil 3 pour Livre de Cuisine",
                            ProjectId = 8
                        },
                        new
                        {
                            Id = 32,
                            Amount = 100m,
                            Description = "Seuil 1 pour Festival de Musique",
                            ProjectId = 9
                        },
                        new
                        {
                            Id = 33,
                            Amount = 200m,
                            Description = "Seuil 2 pour Festival de Musique",
                            ProjectId = 9
                        },
                        new
                        {
                            Id = 34,
                            Amount = 300m,
                            Description = "Seuil 3 pour Festival de Musique",
                            ProjectId = 9
                        },
                        new
                        {
                            Id = 35,
                            Amount = 400m,
                            Description = "Seuil 4 pour Festival de Musique",
                            ProjectId = 9
                        },
                        new
                        {
                            Id = 36,
                            Amount = 100m,
                            Description = "Seuil 1 pour Startup Technologique",
                            ProjectId = 10
                        },
                        new
                        {
                            Id = 37,
                            Amount = 200m,
                            Description = "Seuil 2 pour Startup Technologique",
                            ProjectId = 10
                        },
                        new
                        {
                            Id = 38,
                            Amount = 300m,
                            Description = "Seuil 3 pour Startup Technologique",
                            ProjectId = 10
                        },
                        new
                        {
                            Id = 39,
                            Amount = 400m,
                            Description = "Seuil 4 pour Startup Technologique",
                            ProjectId = 10
                        },
                        new
                        {
                            Id = 40,
                            Amount = 500m,
                            Description = "Seuil 5 pour Startup Technologique",
                            ProjectId = 10
                        });
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "A valider"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Validé"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejeté"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Terminé"
                        });
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user", null, t =>
                        {
                            t.HasCheckConstraint("CHK_User_DateOfBirth", "DateOfBirth <= DATEADD(year, -18, GETDATE())");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice@example.com",
                            Password = "password1",
                            Username = "Alice"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1991, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bob@example.com",
                            Password = "password2",
                            Username = "Bob"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1992, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "charlie@example.com",
                            Password = "password3",
                            Username = "Charlie"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1993, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "diana@example.com",
                            Password = "password4",
                            Username = "Diana"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1994, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eve@example.com",
                            Password = "password5",
                            Username = "Eve"
                        },
                        new
                        {
                            Id = 6,
                            DateOfBirth = new DateTime(1990, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "frank@example.com",
                            Password = "password6",
                            Username = "Frank"
                        },
                        new
                        {
                            Id = 7,
                            DateOfBirth = new DateTime(1991, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "grace@example.com",
                            Password = "password7",
                            Username = "Grace"
                        },
                        new
                        {
                            Id = 8,
                            DateOfBirth = new DateTime(1992, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hank@example.com",
                            Password = "password8",
                            Username = "Hank"
                        },
                        new
                        {
                            Id = 9,
                            DateOfBirth = new DateTime(1993, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ivy@example.com",
                            Password = "password9",
                            Username = "Ivy"
                        },
                        new
                        {
                            Id = 10,
                            DateOfBirth = new DateTime(1994, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jack@example.com",
                            Password = "password10",
                            Username = "Jack"
                        },
                        new
                        {
                            Id = 11,
                            DateOfBirth = new DateTime(1990, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "karen@example.com",
                            Password = "password11",
                            Username = "Karen"
                        },
                        new
                        {
                            Id = 12,
                            DateOfBirth = new DateTime(1991, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "leo@example.com",
                            Password = "password12",
                            Username = "Leo"
                        },
                        new
                        {
                            Id = 13,
                            DateOfBirth = new DateTime(1992, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mona@example.com",
                            Password = "password13",
                            Username = "Mona"
                        },
                        new
                        {
                            Id = 14,
                            DateOfBirth = new DateTime(1993, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "nina@example.com",
                            Password = "password14",
                            Username = "Nina"
                        },
                        new
                        {
                            Id = 15,
                            DateOfBirth = new DateTime(1994, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "oscar@example.com",
                            Password = "password15",
                            Username = "Oscar"
                        });
                });

            modelBuilder.Entity("MM_project_category", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("MM_project_category");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProjectId = 1,
                            CategoryId = 16
                        },
                        new
                        {
                            ProjectId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            ProjectId = 2,
                            CategoryId = 13
                        },
                        new
                        {
                            ProjectId = 3,
                            CategoryId = 12
                        },
                        new
                        {
                            ProjectId = 4,
                            CategoryId = 16
                        },
                        new
                        {
                            ProjectId = 4,
                            CategoryId = 7
                        },
                        new
                        {
                            ProjectId = 5,
                            CategoryId = 12
                        },
                        new
                        {
                            ProjectId = 6,
                            CategoryId = 6
                        },
                        new
                        {
                            ProjectId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            ProjectId = 6,
                            CategoryId = 15
                        },
                        new
                        {
                            ProjectId = 7,
                            CategoryId = 16
                        },
                        new
                        {
                            ProjectId = 8,
                            CategoryId = 1
                        },
                        new
                        {
                            ProjectId = 8,
                            CategoryId = 10
                        },
                        new
                        {
                            ProjectId = 9,
                            CategoryId = 12
                        },
                        new
                        {
                            ProjectId = 9,
                            CategoryId = 15
                        },
                        new
                        {
                            ProjectId = 10,
                            CategoryId = 16
                        },
                        new
                        {
                            ProjectId = 10,
                            CategoryId = 14
                        },
                        new
                        {
                            ProjectId = 10,
                            CategoryId = 17
                        });
                });

            modelBuilder.Entity("MM_user_role", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("MM_user_role");
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.Project", b =>
                {
                    b.HasOne("Crowdy.DAL.Entities.User", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Crowdy.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Crowdy.DAL.Entities.User", "ValidatedBy")
                        .WithMany()
                        .HasForeignKey("ValidatedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Owner");

                    b.Navigation("Status");

                    b.Navigation("ValidatedBy");
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.ProjectContribution", b =>
                {
                    b.HasOne("Crowdy.DAL.Entities.Project", "Project")
                        .WithMany("ProjectContributions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Crowdy.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.ProjectThreshold", b =>
                {
                    b.HasOne("Crowdy.DAL.Entities.Project", "Project")
                        .WithMany("ProjectThresholds")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MM_project_category", b =>
                {
                    b.HasOne("Crowdy.DAL.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdy.DAL.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MM_user_role", b =>
                {
                    b.HasOne("Crowdy.DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Crowdy.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.Project", b =>
                {
                    b.Navigation("ProjectContributions");

                    b.Navigation("ProjectThresholds");
                });

            modelBuilder.Entity("Crowdy.DAL.Entities.User", b =>
                {
                    b.Navigation("OwnedProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
